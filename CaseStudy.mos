!@encoding CP1252
model EPower
uses "mmxprs";

!
! Declare variables
!

declarations
	
	Source:                   set of string
	Emiss:                    set of string
	
	! Times/periods/demand
	Times:                    set of integer	
	PeriodLength:             array(Times) of real
	Demand:                   array(Times) of real
	
	! Source properties
	MaxOutput:                array(Source) of real
	RunningCost:              array(Source) of real
	IncreaseCost:             array(Source) of real
	
	! Emissions
	Emissions:                array(Emiss,Source) of real
	EmissionsLimit:           array(Emiss) of real
	
	! Misc constants
	MaxHydroReserve:          real
	NaturalHydroInflow:       real
	HydroPowerEfficiencyFrac: real
	ElectricityPrice:         real
	
	! Demand/wind multipliers for secondary analysis (group-specific)
	DemandMu:                 real
	WindMu:                   real
	
	! Decision variables
	Generate:                 array(Source,Times) of mpvar  ! Energy output from source s at time t (MW)
	Pump:                     array(Times) of mpvar  ! Energy pumped to reservoir at time t (MW)
	HydroReserve:             array(Times) of mpvar  ! Water remaining in reservoir at end of time t (MWh)
	Increase:                 array(Source,Times) of mpvar  ! Increase from source s at time t

end-declarations


!
! Declare procedures and functions
!

! Get the index of the 'previous' time period for given current time period t.
! Uses modular arithmetic to find the previous time period, looping around to the start
! when given the end period.  This way we can freely extend the number of time periods
! in the .dat file without changing the main model code. I.e. this is better style.
! N.B. the in-built 'mod' operator is actually a 'remainder' operator and doesn't work
! correctly with negative numbers.  Hence the explicit definition.
function getprevperiod(t:integer):integer
	n := getsize(Times)
	returned := ((((t-2) mod n) + n) mod n) + 1
end-function

! Print a standard table output for the main model.
! Saves us repeating this code for every variation of the model.
procedure print_table(title:string)
	colwidth := 13
	writeln("\n\n\n", title, "\n", "===================\n")  ! "="*getsize(title)
	writeln("Total profit: £", strfmt(getobjval/1e6, 0, 3), " million.\n")
	writeln(strfmt("Optimal generation schedule", colwidth*4))
	writeln
	write(strfmt(" ", colwidth))
	forall(t in Times) write(strfmt(t, colwidth))
	writeln
	writeln("-------------------------------------------------------------------------------------------")
	forall(s in Source) do
		write(strfmt(s, colwidth))
		forall(t in Times) write(strfmt(getsol(Generate(s,t)), colwidth))
		writeln
	end-do 
	
	writeln("-------------------------------------------------------------------------------------------")
	!write(strfmt("TOTAL", colwidth))
	!forall(t in Times) write(strfmt(getsol(EnergySold(t)), colwidth))
	
	!writeln
	!write(strfmt("Demand", colwidth))
	!forall(t in Times) write(strfmt(getsol(Demand(t)), colwidth))
	
	!writeln
	!writeln
	write(strfmt("Reservoir lvl", colwidth))
	forall(t in Times) write(strfmt(getsol(HydroReserve(t)), colwidth))
	writeln
end-procedure


!
! Load data from file
!

initializations from "EPower.dat"
	Emiss Source Times PeriodLength Demand
	MaxOutput RunningCost IncreaseCost
	Emissions EmissionsLimit
	MaxHydroReserve NaturalHydroInflow HydroPowerEfficiencyFrac ElectricityPrice
	DemandMu WindMu
end-initializations


!
! Basic model
!

! Hydro reserves and demand
forall(t in Times) do
	! Hydro reserve must be consistent across time periods
	NetHydroFlow(t) := (HydroPowerEfficiencyFrac * Pump(t) + NaturalHydroInflow - Generate("Hydro",t)) * PeriodLength(t)
	HydroReserve(t) = HydroReserve(getprevperiod(t)) + NetHydroFlow(t)
	
	! Hydro reserve must not exceed maximum
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	
	! Energy sold must meet the demand exactly
	EnergySold(t) := sum(s in Source) Generate(s,t) - Pump(t)
	DemandCS(t) := EnergySold(t) = Demand(t)
end-do

! Output generated
forall(s in Source) do
	! Output generation level at t must not exceed max output
	forall(t in Times) OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
	
	! Total energy generated from each source in MWh
	TotalEnergyGenerated(s) := sum(t in Times) Generate(s,t)*PeriodLength(t)
end-do

! Emissions
forall(e in Emiss)
	! Emissions of each emittant must not exceed limit
	EmmissionCS(e) :=
		sum(s in Source) TotalEnergyGenerated(s) * Emissions(e,s) <= EmissionsLimit(e)

! Increases
forall(s in Source, t in Times) do
	! Generation must be consistent with previous increase
	IncreaseCS(s,t) := Generate(s,t) <= Generate(s,getprevperiod(t)) + Increase(s,t)
	
	! Increase must be non-negative
	Increase(s,t) >= 0
end-do	

! Objective
TotalIncreaseCost := sum(s in Source, t in Times) Increase(s,t) * IncreaseCost(s)
TotalRunningCost := sum(s in Source) TotalEnergyGenerated(s) * RunningCost(s)
TotalIncome := sum(t in Times) EnergySold(t) * PeriodLength(t) * ElectricityPrice
TotalProfit := TotalIncome - TotalRunningCost - TotalIncreaseCost


!
! PRINT 'BASE' CASE
!

maximize(TotalProfit)
print_table("BASE CASE")


!
! PRINT 'STRICTER CO2 LIMITS' CASE
!

TotalCO2Emmission := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s)
EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s) <= EmissionsLimit("CO2") * 0.5
maximize(TotalProfit)
print_table("STRICTER CO2 LIMITS")


!
! PRINT 'SOURCE EXPANSION DECISION' TABLE
!

writeln("\n\n\nSOURCE EXPANSION DECISION\n", "=========================\n")
write(strfmt("Expand:", 13), strfmt("Profit (£m)", 13))
forall(s in Source) write(strfmt(s, 10))
write(strfmt("CO2", 10))
writeln

forall(s in Source) do
	! Increase the max output of this source by 1 GW
	MaxOutput(s) := MaxOutput(s) + 1000
	
	! Additional increases for hydro
	if s = "Hydro" then 
		NaturalHydroInflow := NaturalHydroInflow * 1.5
		MaxHydroReserve := MaxHydroReserve * 1.5
	end-if
	
	! Fix constraints
	forall(so in Source, t in Times) do
		HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
		OutputCS(so,t) := Generate(so,t) <= MaxOutput(so)
	end-do
	
	! Reoptimize
	maximize(TotalProfit)
	
	! Output
	write(strfmt(s, 13), "      ", strfmt(getobjval/1e6, 0, 3))
	forall(so in Source) write(strfmt(getsol(TotalEnergyGenerated(so)), 10))
	write("|", getsol(TotalCO2Emmission))
	writeln
	
	! Reset data for re-use
	initializations from "EPower.dat"
		MaxOutput NaturalHydroInflow MaxHydroReserve
	end-initializations
end-do

EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)<=EmissionsLimit("CO2")
forall(s in Source, t in Times) do
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
end-do


!
! PRINT 'CUSTOM MULTIPLIERS' CASE
!

MaxOutput("Wind") := MaxOutput("Wind") * WindMu
forall(t in Times) do
	OutputCS("Wind",t) := Generate("Wind",t) <= MaxOutput("Wind")
	Demand(t) := Demand(t) * DemandMu
	DemandCS(t) := EnergySold(t) = Demand(t)
end-do

maximize(TotalProfit)
print_table("CUSTOM MULTIPLIERS")

end-model
