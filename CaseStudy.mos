!@encoding CP1252
model EPower
uses "mmxprs";

declarations
	
	Source:                   set of string
	Emiss:                    set of string
	
	! Times/periods/demand
	Times:                    set of integer	
	PeriodLength:             array(Times) of real
	Demand:                   array(Times) of real
	
	! Source properties
	MaxOutput:                array(Source) of real
	RunningCost:              array(Source) of real
	IncreaseCost:             array(Source) of real
	
	! Emissions
	Emissions:                array(Emiss,Source) of real
	EmissionsLimit:           array(Emiss) of real
	
	! Misc constants
	MaxHydroReserve:          real
	NaturalHydroInflow:       real
	HydroPowerEfficiencyFrac: real
	ElectricityPrice:         real
	
	! Demand/wind multipliers for secondary analysis (group-specific)
	DemandMu:                 real
	WindMu:                   real
	
	! Decision variables
	Generate:                 array(Source,Times) of mpvar  ! Energy output from source s at time t (MW)
	Pump:                     array(Times) of mpvar  ! Energy pumped to reservoir at time t (MW)
	HydroReserve:             array(Times) of mpvar  ! Water remaining in reservoir at end of time t (MWh)
	Increase:                 array(Source, Times) of mpvar  ! Increase from source s at time t

end-declarations


!
! Load data from file
!

initializations from "EPower.dat"
	Emiss Source Times PeriodLength Demand
	MaxOutput RunningCost IncreaseCost
	Emissions EmissionsLimit
	MaxHydroReserve NaturalHydroInflow HydroPowerEfficiencyFrac ElectricityPrice
	DemandMu WindMu
end-initializations


!
! Basic model
!

! Hydro reserve
forall(t in Times) do
	! Hydro reserve must be consistent across time periods
	if t = 1 then
		HydroReserve(t) = HydroReserve(6) + (HydroPowerEfficiencyFrac * Pump(t) + NaturalHydroInflow - Generate("Hydro",t)) * PeriodLength(t)
	else
		HydroReserve(t) = HydroReserve(t-1) + (HydroPowerEfficiencyFrac * Pump(t) + NaturalHydroInflow - Generate("Hydro",t)) * PeriodLength(t)
	end-if
	
	! Hydro reserve must not exceed maximum
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	
	! Energy sold must meet the demand exactly
	EnergySold(t) := sum(s in Source) Generate(s,t) - Pump(t)
	DemandCS(t) := EnergySold(t) = Demand(t)
end-do

! Output generated
forall(s in Source) do
	! Output generation level at t must not exceed max output
	forall(t in Times) OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
	
	! Total energy generated from each source in MWh
	TotalEnergyGenerated(s) := sum(t in Times) Generate(s,t)*PeriodLength(t)
end-do

! Emissions
forall(e in Emiss)
	! Emissions of each emittant must not exceed limit
	EmmissionCS(e) :=
		sum(s in Source) TotalEnergyGenerated(s)*Emissions(e,s) <= EmissionsLimit(e)

! Increases
forall(s in Source, t in Times) do
	! Generation must be consistent with previous increase
	if t = 1 then
		IncreaseCS(s,t) := Generate(s,t) <=  Generate(s,6) + Increase(s,t)
	else
		IncreaseCS(s,t) := Generate(s,t) <= Generate(s,t-1) + Increase(s,t)
	end-if
	
	! Increase must be non-negative
	Increase(s,t) >= 0
end-do	

! Objective
TotalIncreaseCost := sum(s in Source, t in Times) Increase(s,t) * IncreaseCost(s)
TotalRunningCost := sum(s in Source) TotalEnergyGenerated(s) * RunningCost(s)
TotalIncome := sum(t in Times) EnergySold(t) * PeriodLength(t) * ElectricityPrice
TotalProfit := TotalIncome - TotalRunningCost - TotalIncreaseCost


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!! Base case !!!!!!!!!!!!!!!!!!!

maximize(TotalProfit)

writeln("\nBASE CASE\n", "=========\n")
writeln("Total profit: £", strfmt(getobjval/1e6,0,3), " million.")
writeln
writeln("Optimal generation schedule")
write("            ")
forall(t in Times) write(strfmt(t,8))
forall(s in Source) do
	writeln
	write(strfmt(s,13))
	forall(t in Times) write(strfmt(getsol(Generate(s,t)),8))
end-do 
writeln
writeln
write("Reservoir lvl")
forall(t in Times) write(strfmt(getsol(HydroReserve(t)),8))


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!! Stricter CO2 limits !!!!!!!!!!!

writeln("\n\n\nSTRICTER CO2 LIMITS\n", "===================\n")

TotalCO2Emmission := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s)
EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s) <= EmissionsLimit("CO2") * 0.5

maximize(TotalProfit)

writeln("New profit: £", strfmt(getobjval/1e6,0,3), " million.")
writeln
writeln("Optimal generation schedule")
write("            ")
forall(t in Times) write(strfmt(t,8))
forall(s in Source) do
	writeln
	write(strfmt(s,13))
	forall(t in Times) write(strfmt(getsol(Generate(s,t)),8))
end-do 
writeln
writeln
write("Reservoir lvl")
forall(t in Times) write(strfmt(getsol(HydroReserve(t)),8))


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!! Which power source to expand? !!!!!!
writeln
writeln
writeln("\n\n\nSOURCE EXPANSION DECISION\n", "=========================\n")
write(strfmt("Source expanded",20), strfmt("Profit",15), "|")
forall(s in Source) write(strfmt(s,10))
write("|", strfmt("CO2",6))
writeln

forall(s in Source) do 

	! This block of initializations restores original values 
	initializations from "Epower.dat"
		MaxOutput NaturalHydroInflow MaxHydroReserve
	end-initializations

	if s = "Hydro" then 
		NaturalHydroInflow:= NaturalHydroInflow*1.5
		MaxHydroReserve:= MaxHydroReserve*1.5
	end-if
	
	MaxOutput(s):= MaxOutput(s)+1000
	
	forall(so in Source, t in Times) do
		HydroReserveCS(t):= HydroReserve(t) <= MaxHydroReserve
		OutputCS(so,t):= Generate(so,t) <= MaxOutput(so)
	end-do
	
	maximize(TotalProfit)
	write(strfmt(s,15),'     ', strfmt(getsol(TotalProfit),15),'|')
	forall(so in Source) write(strfmt(getsol(TotalEnergyGenerated(so)),10))
	write("|",getsol(TotalCO2Emmission))
	writeln
	
end-do

!!!! Reset constraints to the original values !!!!
initializations from "Epower.dat"
	MaxOutput NaturalHydroInflow MaxHydroReserve
end-initializations	

EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)<=EmissionsLimit("CO2")
forall(s in Source, t in Times) do
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
end-do


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!! Multipliers introduced!!!!!!!!!!!!!

MaxOutput("Wind") := MaxOutput("Wind") * WindMu
forall(t in Times) do
	OutputCS("Wind",t) := Generate("Wind",t) <= MaxOutput("Wind")
	Demand(t) := Demand(t) * DemandMu
	DemandCS(t) := EnergySold(t) = Demand(t)
end-do

maximize(TotalProfit)

writeln
writeln("\n\n\nCUSTOM MULTIPLIERS\n", "==================\n")
writeln("Total profit: £", strfmt(getobjval/1e6,0,3), " million.")
writeln
writeln("Optimal generation schedule")
write("            ")
forall(t in Times) write(strfmt(t,8))
forall(s in Source) do
	writeln
	write(strfmt(s,13))
	forall(t in Times) write(strfmt(getsol(Generate(s,t)),8))
end-do 
writeln
writeln
write("Reservoir lvl")
forall(t in Times) write(strfmt(getsol(HydroReserve(t)),8))
	
end-model
