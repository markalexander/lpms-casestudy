!@encoding CP1252
model EPower
uses "mmxprs"; !gain access to the Xpress-Optimizer solver


declarations
Emiss:			set of string
Source:			set of string
Times:			set of integer	
PeriodLength: 	array(Times) of real
Demand:			array(Times) of real

! Source properties
MaxOutput: 		array(Source) of real
RunningCost: 	array(Source) of real
IncreaseCost:	array(Source) of real

Emissions: 		array(Emiss,Source) of real
EmissionsLimit: array(Emiss) of real

MaxHydroReserve:			real
NaturalHydroInflow:			real
HydroPowerEfficiencyFrac:	real
ElectricityPrice:			real

!Multipliers used in later analysis
DemandMu: 	real
WindMu: 	real

!Decision variables:
Generate: 		array(Source,Times) of mpvar !Energy output from each power source in each period (MW)
Pump: 			array(Times) of mpvar !How much energy is pumped into reservoir (MW)
HydroReserve: 	array(Times) of mpvar !How much water is stored at the end of the period in the reservoir (MWh)
Increase: 		array(Source, Times) of mpvar 

end-declarations

initializations from "EPower.dat"
Emiss Source Times PeriodLength Demand
MaxOutput RunningCost IncreaseCost 
Emissions EmissionsLimit MaxHydroReserve 
NaturalHydroInflow HydroPowerEfficiencyFrac 
ElectricityPrice DemandMu WindMu
end-initializations


forall(t in Times) do

	if t = 1 then HydroReserve(t)= HydroReserve(6) + (HydroPowerEfficiencyFrac*Pump(t) + NaturalHydroInflow - Generate("Hydro",t)) * PeriodLength(t)
	else HydroReserve(t)= HydroReserve(t-1) + (HydroPowerEfficiencyFrac*Pump(t) + NaturalHydroInflow - Generate("Hydro",t))*PeriodLength(t)
	end-if
	
	HydroReserveCS(t):= HydroReserve(t) <= MaxHydroReserve
	
	EnergySold(t):= sum(s in Source) Generate(s,t) - Pump(t)
	DemandCS(t):= EnergySold(t) = Demand(t) !Meeting the demand
	
end-do

forall(s in Source) do 
	forall(t in Times) OutputCS(s,t):= Generate(s,t) <= MaxOutput(s) 
	
	TotalEnergyGenerated(s):= sum(t in Times) Generate(s,t)*PeriodLength(t) !Total energy generated from each source in MWh
end-do

!Meeting the emission limits
forall(e in Emiss)
	EmmissionCS(e):= sum(s in Source) TotalEnergyGenerated(s)*Emissions(e,s) <= EmissionsLimit(e)

forall(s in Source, t in Times) do
	if t = 1 then IncreaseCS(s,t):= Generate(s,t) <=  Generate(s,6) + Increase(s,t)
	else IncreaseCS(s,t):= Generate(s,t) <= Generate(s,t-1) + Increase(s,t)
	end-if
	Increase(s,t) >= 0
end-do	


TotalIncreaseCost:= sum(s in Source, t in Times) Increase(s,t)*IncreaseCost(s)
TotalRunningCost:= sum(s in Source) TotalEnergyGenerated(s)*RunningCost(s)

TotalIncome:= sum(t in Times) EnergySold(t)*PeriodLength(t)*ElectricityPrice

TotalProfit:= TotalIncome - TotalRunningCost - TotalIncreaseCost

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!! Base case !!!!!!!!!!!!!!!!!!!

maximize(TotalProfit)

writeln("BASE CASE")
writeln("Base case profit: ",getsol(TotalProfit))
writeln
writeln("Optimal generation schedule")
write("            ")
forall(t in Times) write(strfmt(t,8))
forall(s in Source) do
	writeln
	write(strfmt(s,13))
	forall(t in Times) write(strfmt(getsol(Generate(s,t)),8))
end-do 
writeln
writeln
write("Reservoir lvl")
forall(t in Times) write(strfmt(getsol(HydroReserve(t)),8))

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!! Stricter CO2 limits !!!!!!!!!!!
writeln
writeln
writeln("Stricter CO2 limits")
writeln

TotalCO2Emmission:= sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)
EmmissionCS("CO2"):= sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)<=EmissionsLimit("CO2")*0.5

maximize(TotalProfit)

writeln("New profit: ",getsol(TotalProfit))
writeln
writeln("Optimal generation schedule")
write("            ")
forall(t in Times) write(strfmt(t,8))
forall(s in Source) do
	writeln
	write(strfmt(s,13))
	forall(t in Times) write(strfmt(getsol(Generate(s,t)),8))
end-do 
writeln
writeln
write("Reservoir lvl")
forall(t in Times) write(strfmt(getsol(HydroReserve(t)),8))


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!! Which power source to expand? !!!!!!
writeln
writeln
writeln("Which source to expand?")
write(strfmt("Source expanded",20), strfmt("Profit",15),"|")
forall(s in Source) write(strfmt(s,10))
write("|", strfmt("CO2",6))
writeln

forall(s in Source) do 

	! This block of initializations restores original values 
	initializations from "Epower.dat"
	MaxOutput NaturalHydroInflow MaxHydroReserve
	end-initializations

	if s = "Hydro" then 
		NaturalHydroInflow:= NaturalHydroInflow*1.5
		MaxHydroReserve:= MaxHydroReserve*1.5
	end-if
	
	MaxOutput(s):= MaxOutput(s)+1000
	
	forall(so in Source, t in Times) do
		HydroReserveCS(t):= HydroReserve(t) <= MaxHydroReserve
		OutputCS(so,t):= Generate(so,t) <= MaxOutput(so)
	end-do
	
	maximize(TotalProfit)
	write(strfmt(s,15),'     ', strfmt(getsol(TotalProfit),15),'|')
	forall(so in Source) write(strfmt(getsol(TotalEnergyGenerated(so)),10))
	write("|",getsol(TotalCO2Emmission))
	writeln
	
end-do

!!!! Reset constraints to the original values !!!!
initializations from "Epower.dat"
	MaxOutput NaturalHydroInflow MaxHydroReserve
end-initializations	

EmmissionCS("CO2"):= sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)<=EmissionsLimit("CO2")
forall(s in Source, t in Times) do
	HydroReserveCS(t):= HydroReserve(t) <= MaxHydroReserve
	OutputCS(s,t):= Generate(s,t) <= MaxOutput(s)
end-do

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!! Multipliers introduced!!!!!!!!!!!!!

MaxOutput("Wind"):= MaxOutput("Wind") * WindMu
forall(t in Times) do
	OutputCS("Wind",t):= Generate("Wind",t) <= MaxOutput("Wind")
	Demand(t):= Demand(t) * DemandMu
	DemandCS(t):= EnergySold(t) = Demand(t)
end-do

maximize(TotalProfit)

writeln
writeln("CASE WITH OUR GROUP's MULTIPLIERS")
writeln("Base case profit: ",getsol(TotalProfit))
writeln
writeln("Optimal generation schedule")
write("            ")
forall(t in Times) write(strfmt(t,8))
forall(s in Source) do
	writeln
	write(strfmt(s,13))
	forall(t in Times) write(strfmt(getsol(Generate(s,t)),8))
end-do 
writeln
writeln
write("Reservoir lvl")
forall(t in Times) write(strfmt(getsol(HydroReserve(t)),8))
	
end-model
