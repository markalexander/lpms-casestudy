!@encoding CP1252
model EPower
uses "mmxprs";
uses "mmsystem";

! README:
!
! General run settings/params can be changed in the parameters section below.
! Also use these to toggle which output you would like to see based on model or
! aspect (facet) of the models.  Turning everything on results in a LOT 
! of output to console and many CSV files generated, so if you are interested
! in only one aspect it is recommended to only turn that one thing on.
!
! For understanding table output inside the model, note that we essentially
! aim to build a list of headings and a 'matrix' (list of lists) of data, and pass
! this to our make_table() or make_csv() procedures.

!
! DECLARE PARAMETERS
!

parameters
	
	OutputCSV = true                  ! Create CSV files for reporting?
	OutputDir = 'output/'             ! Output directory for the CSV files
	ConsoleMaxWidth = 120             ! Maximum width for console output
	
	! Which model do you want to run?
	RunModelBaseCase = true            ! Run the base case model?
	RunModelVariableDemand = true      ! Run the variable demand/multipliers model?
	RunModelReducedCO2 = true          ! Run the reduced CO2 model?
	RunModelEmissionsMarket = true     ! Run the emissions market model?
	
	! Report/output generation settings
	RunFacetGenerationSchedule = true  ! Output optimal generation schedules?
	RunFacetConstraintInfo = true      ! Output constraint info, fair prices, etc?
	RunFacetSourceExpansion = true     ! Output source expansion decision for CO2?
	
end-parameters


!
! DECLARE MODEL IDENTIFIERS
!

declarations
	
	Source:                   set of string
	Emiss:                    set of string
	
	! Times/periods/demand
	Times:                    set of integer	
	PeriodLength:             array(Times) of real
	Demand:                   array(Times) of real
	
	! Source properties
	MaxOutput:                array(Source) of real
	RunningCost:              array(Source) of real
	IncreaseCost:             array(Source) of real
	
	! Emissions
	Emissions:                array(Emiss,Source) of real
	EmissionsLimit:           array(Emiss) of real
	
	! Misc constants
	MaxHydroReserve:          real
	NaturalHydroInflow:       real
	HydroPowerEfficiencyFrac: real
	ElectricityPrice:         real
	
	! Demand/wind multipliers for secondary analysis (group-specific)
	DemandMu:                 real
	WindMu:                   real
	
	! Additional modelling values
	EmissionsCreditPrice:     array(Emiss) of real
	
	! Decision variables
	Generate:                 array(Source,Times) of mpvar  ! Energy output from source s at time t (MW)
	Pump:                     array(Times) of mpvar  ! Energy pumped to reservoir at time t (MW)
	HydroReserve:             array(Times) of mpvar  ! Water remaining in reservoir at end of time t (MWh)
	Increase:                 array(Source,Times) of mpvar  ! Increase from source s at time t
	
	! Misc/intermediate output storage for table data and loops
	t_head:                   list of string
	t_data:                   list of list of real
	t_row:                    list of real
	Mu:                       real
	 
end-declarations


!
! DECLARE FUNCTIONS AND PROCEDURES
!

! N.B. actual definitions are relegated to the bottom of the file. 
forward function getprevperiod(t:integer):integer
forward procedure initialize_data
forward procedure make_heading(title:string, uchar:string)
forward	procedure make_report(title:string, tag:string)
forward procedure carbon_loop(carbon_allocation:real, tag:string)
forward function lc(L:list of real):list of real
forward procedure make_table(headings:list of string, rows:list of list of real)
forward procedure make_csv(headings:list of string, rows:list of list of real, filename:string)

	
!
! LOAD DATA FROM FILE
!

initialize_data


!
! BUILD BASIC MODEL
!

forall(t in Times) do
	! Energy sold must meet the demand exactly
	EnergySold(t) := sum(s in Source) Generate(s,t) - Pump(t)
	DemandCS(t) := EnergySold(t) = Demand(t)
	
	! Hydro reserve must not exceed maximum
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	
	! Pumping capacity must not exceed maximum (see FAQ)
	PumpCS(t) := Pump(t) <= MaxOutput("Hydro")
	
	! Hydro reserve must be consistent across time periods
	NetHydroFlow(t) := (HydroPowerEfficiencyFrac * Pump(t) + NaturalHydroInflow - Generate("Hydro",t)) * PeriodLength(t)
	HydroReserve(t) = HydroReserve(getprevperiod(t)) + NetHydroFlow(t)
end-do

forall(s in Source) do
	! Output generation level of source at t must not exceed max output
	forall(t in Times) OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
	
	! Total energy generated from each source in MWh
	TotalEnergyGenerated(s) := sum(t in Times) Generate(s,t) * PeriodLength(t)
end-do

! Emissions must not exceed limit
forall(e in Emiss) do
	EmissionsGenerated(e) := sum(s in Source) TotalEnergyGenerated(s) * Emissions(e,s)
	EmmissionCS(e) := EmissionsGenerated(e) <= EmissionsLimit(e)
end-do

! Generation must be consistent with previous increase
forall(s in Source, t in Times) do
	IncreaseCS(s,t) := Generate(s,t) <= Generate(s,getprevperiod(t)) + Increase(s,t)
end-do	

! Objective
TotalIncreaseCost := sum(s in Source, t in Times) Increase(s,t) * IncreaseCost(s)
TotalRunningCost := sum(s in Source) TotalEnergyGenerated(s) * RunningCost(s)
TotalRevenue := sum(t in Times) EnergySold(t) * PeriodLength(t) * ElectricityPrice
TotalProfit := TotalRevenue - TotalRunningCost - TotalIncreaseCost


!
! SCENARIO: BASE CASE
!

! Daily scenario planning is dependent on Base Case
if RunModelBaseCase or RunModelVariableDemand then
	maximize(TotalProfit)
	make_report("BASE CASE", 'base')
	
	! Store generation schedule as long term plan
	forall(s in Source, t in Times) do
		LongTermPlan(s,t) := getsol(Generate(s,t))
		LongTermPlanReservoire(t) := getsol(HydroReserve(t))
	end-do
end-if


!
! SCENARIO: REDUCED CO2 EMISSIONS LIMIT
!

TotalCO2Emmission := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s)

if RunModelReducedCO2 then

	make_heading("DAILY SOURCE UTILIZATION BY CO2 REDUCTION", "=")
	
	! Iteratively ramp down CO2 limit to 50%
	! Header
	t_head := ["Reduction (%)"]
	forall(s in Source) do
		t_head += [s]
	end-do
	t_head += ["Profit (£)"]
	! Data
	t_data := []
	Mu := 0.9
	repeat
		EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s) <= EmissionsLimit("CO2") * Mu
		maximize(TotalProfit)
		t_row := [(1-Mu)*100]
		forall(s in Source) do
			t_row += [getsol(TotalEnergyGenerated(s))]
		end-do
		t_row += [getobjval]
		t_data += [lc(t_row)]
		Mu -= 0.05
	until Mu < 0.5
	
	! Print table and create CSV
	make_table(t_head, t_data)
	make_csv(t_head, t_data, "co2_rampdown.csv")
	
	
	! Run a full report for the final 50% reduction case
	make_report("STRICTER CO2 LIMITS - 50%", 'co2')
	
	! Source expansion
	if RunFacetSourceExpansion then
	
		EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s) <= EmissionsLimit("CO2") * 0.5
		
		make_heading("SOURCE EXPANSION DECISION", "=")
		
		! Build header
		t_head := ["Add (MW)", "Profit"]
		forall(s in Source) do
			t_head += [s]
		end-do
		
		! Build data
		forall(s in Source) do
			t_data := []
			
			make_heading(s, "-")
			forall(OutputIncrease in [1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500]) do
	
				if s = "Wind" then 
					! Company is about to finish instalation of wind capacity (see FAQ)
					MaxOutput("Wind") :=  MaxOutput("Wind") + (OutputIncrease / 2) 
				else
					! Increase the max output of this source by 1 GW
					MaxOutput(s) := MaxOutput(s) + OutputIncrease
				end-if
				
				! Additional increases for hydro
				if s = "Hydro" then 
					HydroIncreaseFactor := 1 + (0.5 * OutputIncrease/1000)
					NaturalHydroInflow := NaturalHydroInflow * HydroIncreaseFactor
					MaxHydroReserve := MaxHydroReserve * HydroIncreaseFactor
				end-if
				
				! Fix constraints
				forall(so in Source, t in Times) do
					HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
					OutputCS(so,t) := Generate(so,t) <= MaxOutput(so)
					PumpCS(t) := Pump(t) <= MaxOutput("Hydro")
				end-do
				
				! Reoptimize
				maximize(TotalProfit)
				
				t_row := [OutputIncrease, getobjval]
				forall(so in Source) do
					t_row += [getsol(TotalEnergyGenerated(so))]
				end-do
			
				t_data += [lc(t_row)]
			
				! Reset data for next loop
				initialize_data
				
			end-do
		
			make_table(t_head, t_data)
			
		end-do
		
		EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)<=EmissionsLimit("CO2")
		forall(s in Source, t in Times) do
			HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
			OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
			PumpCS(t) := Pump(t) <= MaxOutput("Hydro")
		end-do
	end-if

end-if

!
! SCENARIO: VARIABLE DEMAND/WIND AVAIL.
!

if RunModelVariableDemand then
	
	! The values for nuclear, coal and gas in last period need to be consistent with
	! the long term plan. 
	forall(s in Source) do
		if s = "Nuclear" or s = "Coal" or s = "Gas" then
			LongTermCS(s) := Generate(s,getprevperiod(1)) = LongTermPlan(s,getprevperiod(1))
		end-if
	end-do
	
	! Amount of water stored in reservouir in last period need to be consisten with long term plan
	LongTermReservoireCS := HydroReserve(getprevperiod(1)) = LongTermPlanReservoire(getprevperiod(1))
	
		
	MaxOutput("Wind") := MaxOutput("Wind") * WindMu
	forall(t in Times) do
		OutputCS("Wind",t) := Generate("Wind",t) <= MaxOutput("Wind")
		Demand(t) := Demand(t) * DemandMu
		DemandCS(t) := EnergySold(t) = Demand(t)
	end-do
	
	maximize(TotalProfit)
	make_report("CUSTOM MULTIPLIERS", 'multipliers')

end-if
!
! EMISSION CREDITS MODEL
!

! Reset the data
initialize_data

! Remove hard emissions constraints

if RunModelEmissionsMarket then
	EmmissionCS('CO2') := 0
	
	! Reset constraints from above
	forall(s in Source, t in Times) do
		LongTermCS(s) := 0
		OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
		DemandCS(t) := EnergySold(t) = Demand(t)
	end-do 
	
	LongTermReservoireCS := 0

end-if
!
! Loop over various carbon prices to check the composition of energy generation and profits
!

! No free allocation of carbon credits
carbon_loop(0, 'carbon_tax')

! Free allocation equal to stricter CO2 emission limit 
carbon_loop(EmissionsLimit("CO2") * 0.5, 'carbon_credit')


!
! PROCEDURE AND FUNCTION DEFINITIONS
!

! The following are used mostly for convenience and to avoid code repition, e.g.
! when printing out standard reporting or creating tables/CSV files.
! They are not necessary for understanding the model in general.

! Get the index of the 'previous' time period for given current time period t.
! Uses modular arithmetic to find the previous time period, looping around to the start
! when given the end period.  This way we can freely extend the number of time periods
! in the .dat file without changing the main model code. I.e. this is better style.
! N.B. the in-built 'mod' operator is actually a 'remainder' operator and doesn't work
! correctly with negative numbers.  Hence the explicit definition.
function getprevperiod(t:integer):integer
	n := getsize(Times)
	returned := ((((t-2) mod n) + n) mod n) + 1
end-function

! List copy function - since for some reason Mosel passes lists by reference
function lc(L:list of real):list of real
	returned := gethead(L, getsize(L))
end-function

! Print a simple heading
procedure make_heading(title:string, uchar:string)
	writeln("\n", title, "\n", uchar*getsize(title), "\n")
end-procedure

! Build a table from a list of headings and a 'matrix' of data
procedure make_table(headings:list of string, rows:list of list of real)
	ncols := getsize(headings)
	colwidth := round(ConsoleMaxWidth/ncols)
	tablewidth := colwidth*ncols
	! Header
	writeln("-"*tablewidth)
	forall(h in headings) do
		write(strfmt(h, colwidth))
	end-do
	writeln
	writeln("-"*tablewidth)
	! Data
	forall(r in rows) do
		forall(x in r) do
			write(strfmt(x, colwidth, 0))
		end-do
		writeln
	end-do
	writeln("-"*tablewidth)
end-procedure

! Build a CSV file from a list of headings and a 'matrix' of data
procedure make_csv(headings:list of string, rows:list of list of real, filename:string)
	fopen(OutputDir + filename, F_OUTPUT)
	! Header
	forall(h in headings) do
		write(",", h)
	end-do
	! Data
	forall(r in rows) do
		forall(x in r) do
			write(",", x)
		end-do
		writeln
	end-do
	fclose(F_OUTPUT)
end-procedure

! Print a standard table output for the main model and its variations.
! Saves us repeating this code for every variation of the model.
procedure make_report(title:string, tag:string)

	writeln("\n\n")
	make_heading("SCENARIO: " + title, "#")

	!
	! Basic information
	!
	
	make_heading("REVENUE BREAKDOWN", "=")
	
	make_table(
		["TotalRevenue", "TotalRunningCosts",
			"TotalIncreaseCosts", "TotalProfit"],
		[[getsol(TotalRevenue), getsol(TotalRunningCost),
			getsol(TotalIncreaseCost), getsol(TotalProfit)]])
	
	!
	! Optimal generation schedule
	!
	
	if RunFacetGenerationSchedule then
		make_heading("GENERATION SCHEDULE", "=")
		! Header
		t_head := ["Period", "StartTime", "EndTime"]
		forall(s in Source) do
			t_head += [s]
		end-do
		t_head += ["Pump", "ResLvl"]
		! Data
		t_data := []
		currtime := 0.0
		forall(t in Times) do
			starttime := currtime
			currtime += PeriodLength(t)
			endtime := currtime
			t_row := [t, starttime, endtime]
			forall(s in Source) do
				t_row += [getsol(Generate(s,t))]
			end-do
			t_row += [getsol(Pump(t)), getsol(HydroReserve(t))]
			t_data += [lc(t_row)]
		end-do
		! Output table and save CSV
		make_table(t_head, t_data)
		make_csv(t_head, t_data, tag + "_generation_schedule.csv")
	end-if
	
	!
	! Constraint reporting/fair prices
	!
	
	! Output
	if RunFacetConstraintInfo then
		make_heading("SOURCE OUTPUT CONSTRAINTS", "=")
		writeln("N.B. fair prices only valid when slack is zero.  An empty table means the constraint was not hit during any period.")
		forall(s in Source) do
			make_heading(s, "-")
			! Heading
			t_head := ["Period", "Slack", "Fair Price (£)", "Valid from", "Valid to"]
			t_data := []
			forall(t in Times) do
				t_row := []
				slack := getslack(OutputCS(s,t))
				if slack = 0 then
					t_row += [t, 0,
						getdual(OutputCS(s,t)),
						getsensrng(XPRS_DN, OutputCS(s,t)),
						getsensrng(XPRS_UP, OutputCS(s,t))]
				!else
					!t_row += [t, slack, 0, 0, 0]
				end-if
				t_data += [lc(t_row)]
			end-do
			make_table(t_head, t_data)
			make_csv(t_head, t_data, tag + "_constraint_output_" + s + '.csv')
		end-do
	
		! Demand
		make_heading("DEMAND CONSTRAINTS", "=")
		t_data := []
		forall(t in Times) do
			if getslack(DemandCS(t)) = 0 then
				t_data += [[
					t,
					getdual(DemandCS(t)),
					getsensrng(XPRS_DN, DemandCS(t)),
					getsensrng(XPRS_UP, DemandCS(t))]]
			end-if
		end-do
		make_table(t_head, t_data)
		make_csv(t_head, t_data, tag + "_constraint_demand.csv")
	
		! Emissions
		make_heading("EMISSIONS CONSTRAINTS", "=")
		HasHitCT := false
		forall(e in Emiss) do
			if getslack(EmmissionCS(e)) = 0 then
				HasHitCT := true
				writeln("Fair price of " + e + " is: £", getdual(EmmissionCS(e)),
						", valid for (", getsensrng(XPRS_DN, EmmissionCS(e)),
						" ,", getsensrng(XPRS_UP, EmmissionCS(e)),')')
				writeln
			end-if
		end-do
		if HasHitCT <> true then
			writeln("Emissions utilization never reaches capacity")
		end-if
	
		! Hydro reservoir
		make_heading("HYDRO CAPACITY CONSTRAINTS", "=")
		HasHitCT := false
		forall(t in Times) do
			if getslack(HydroReserveCS(t)) = 0 then
				HasHitCT := true
				writeln("Fair price of extra hydro capacity at t=" + t + " is: £", getdual(HydroReserveCS(t)),
						", valid for (", getsensrng(XPRS_DN, HydroReserveCS(t)),
						" ,", getsensrng(XPRS_UP, HydroReserveCS(t)),')')
				writeln
			end-if
		end-do
		if HasHitCT <> true then
			writeln("Hydro storage never reaches capacity")
		end-if
	
		! Pump
		make_heading("PUMP CONSTRAINTS", "=")
		HasHitCT := false
		forall(t in Times) do
			if getslack(PumpCS(t)) = 0 then
				HasHitCT := true
				writeln("Fair price of extra pump capacity at t=" + t + " is: £", getdual(PumpCS(t)),
						", valid for (", getsensrng(XPRS_DN, PumpCS(t)),
						" ,", getsensrng(XPRS_UP, PumpCS(t)),')')
				writeln
			end-if
		end-do
		if HasHitCT <> true then
			writeln("Pump utilization never reaches capacity")
		end-if
	end-if
	
end-procedure

! Initialize data from file
! Here as a procedure for easy re-use in iterative models
procedure initialize_data
	initializations from "EPower.dat"
		Emiss Source Times PeriodLength Demand
		MaxOutput RunningCost IncreaseCost
		Emissions EmissionsLimit
		MaxHydroReserve NaturalHydroInflow HydroPowerEfficiencyFrac ElectricityPrice
		DemandMu WindMu
		EmissionsCreditPrice
	end-initializations
end-procedure

! Convenience procedure to loop through carbon market prices/tax values
procedure carbon_loop(carbon_allocation:real, tag:string)
	! Reset emission prices to 0
	forall(e in Emiss) EmissionsCreditPrice(e) := 0
	
	! Open reporting file
	fopen(OutputDir + tag + '.csv', F_OUTPUT)
	
	write("Profit,TotalRunningCost,TotalIncreaseCost,TotalEmissionCreditCost, Co2Price,")
	forall(s in Source) write(s,',')
	writeln
	
	repeat
		
		TotalEmissionCreditCost :=	sum(e in Emiss) (EmissionsGenerated(e) - carbon_allocation) * EmissionsCreditPrice(e)
		TotalProfit := TotalRevenue - TotalRunningCost - TotalIncreaseCost - TotalEmissionCreditCost
		
		maximize(TotalProfit)
		
		write(getsol(TotalProfit),',',
			  getsol(TotalRunningCost),',',
			  getsol(TotalIncreaseCost),',',
			  getsol(TotalEmissionCreditCost),',',
			  EmissionsCreditPrice("CO2"))
		
		forall(s in Source) write(',',getsol(TotalEnergyGenerated(s)))
		writeln
		
		EmissionsCreditPrice("CO2") += 4
	until EmissionsCreditPrice("CO2") > 100
	
	fclose(F_OUTPUT)
end-procedure


end-model