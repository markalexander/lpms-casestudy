!@encoding CP1252
model EPower
uses "mmxprs";
uses "mmsystem";

!
! DECLARE PARAMETERS
!

parameters
	! Report/output generation settings
	ReportOptGenSched = true     ! Report optimal generation schedules?
	ReportDemandCTInfo = true
	ReportEmissionsCTInfo = true       ! Report emissions constraint information?
	ReportHydroResCTInfo = true
	ReportPumpCTInfo = true
	ReportOutputCSV = true       ! Create CSV files for reports?
	ReportOutputDir = 'output/'  ! Output directory for the CSV files
	ReportMaxWidth = 100         ! Maximum width for console output
end-parameters


!
! DECLARE MODEL IDENTIFIERS
!

declarations
	
	Source:                   set of string
	Emiss:                    set of string
	
	! Times/periods/demand
	Times:                    set of integer	
	PeriodLength:             array(Times) of real
	Demand:                   array(Times) of real
	
	! Source properties
	MaxOutput:                array(Source) of real
	RunningCost:              array(Source) of real
	IncreaseCost:             array(Source) of real
	
	! Emissions
	Emissions:                array(Emiss,Source) of real
	EmissionsLimit:           array(Emiss) of real
	
	! Misc constants
	MaxHydroReserve:          real
	NaturalHydroInflow:       real
	HydroPowerEfficiencyFrac: real
	ElectricityPrice:         real
	
	! Demand/wind multipliers for secondary analysis (group-specific)
	DemandMu:                 real
	WindMu:                   real
	
	! Additional modelling values
	EmissionsCreditPrice:     array(Emiss) of real
	
	! Decision variables
	Generate:                 array(Source,Times) of mpvar  ! Energy output from source s at time t (MW)
	Pump:                     array(Times) of mpvar  ! Energy pumped to reservoir at time t (MW)
	HydroReserve:             array(Times) of mpvar  ! Water remaining in reservoir at end of time t (MWh)
	Increase:                 array(Source,Times) of mpvar  ! Increase from source s at time t
	
end-declarations


!
! DECLARE FUNCTIONS AND PROCEDURES
!

! N.B. actual definitions are relegated to the bottom of the file. 
forward function getprevperiod(t:integer):integer
forward procedure initialize_data
forward procedure print_heading(title:string, uchar:string)
forward	procedure generate_report(title:string, tag:string)
forward procedure carbon_loop(carbon_allocation:real, tag:string)


!
! LOAD DATA FROM FILE
!

initialize_data


!
! BUILD BASIC MODEL
!

forall(t in Times) do
	! Energy sold must meet the demand exactly
	EnergySold(t) := sum(s in Source) Generate(s,t) - Pump(t)
	DemandCS(t) := EnergySold(t) = Demand(t)
	
	! Hydro reserve must not exceed maximum
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	
	! Pumping capacity must not exceed maximum (see FAQ)
	PumpCS(t) := Pump(t) <= MaxOutput("Hydro")
	
	! Hydro reserve must be consistent across time periods
	NetHydroFlow(t) := (HydroPowerEfficiencyFrac * Pump(t) + NaturalHydroInflow - Generate("Hydro",t)) * PeriodLength(t)
	HydroReserve(t) = HydroReserve(getprevperiod(t)) + NetHydroFlow(t)
end-do

forall(s in Source) do
	! Output generation level of source at t must not exceed max output
	forall(t in Times) OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
	
	! Total energy generated from each source in MWh
	TotalEnergyGenerated(s) := sum(t in Times) Generate(s,t) * PeriodLength(t)
end-do

! Emissions must not exceed limit
forall(e in Emiss) do
	EmissionsGenerated(e) := sum(s in Source) TotalEnergyGenerated(s) * Emissions(e,s)
	EmmissionCS(e) := EmissionsGenerated(e) <= EmissionsLimit(e)
end-do

! Generation must be consistent with previous increase
forall(s in Source, t in Times) do
	IncreaseCS(s,t) := Generate(s,t) <= Generate(s,getprevperiod(t)) + Increase(s,t)
end-do	

! Objective
TotalIncreaseCost := sum(s in Source, t in Times) Increase(s,t) * IncreaseCost(s)
TotalRunningCost := sum(s in Source) TotalEnergyGenerated(s) * RunningCost(s)
TotalRevenue := sum(t in Times) EnergySold(t) * PeriodLength(t) * ElectricityPrice
TotalProfit := TotalRevenue - TotalRunningCost - TotalIncreaseCost


!
! SCENARIO: BASE CASE
!

maximize(TotalProfit)
generate_report("BASE CASE", 'base')

! Store generation schedule as long term plan
forall(s in Source, t in Times) do
	LongTermPlan(s,t) := getsol(Generate(s,t))
	LongTermPlanReservoire(t) := getsol(HydroReserve(t))
end-do


!
! SCENARIO: REDUCED CO2 EMISSION LIMIT
!

TotalCO2Emmission := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s)
EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s) * Emissions("CO2",s) <= EmissionsLimit("CO2") * 0.5
maximize(TotalProfit)
generate_report("STRICTER CO2 LIMITS", 'co2')


! Source expansion
print_heading("SOURCE EXPANSION DECISION", "=")

writeln("-"*ReportMaxWidth)
write(strfmt("Expand:", 13), strfmt("Profit (£m)", 13))
forall(s in Source) write(strfmt(s, 10))
write(strfmt("CO2", 10))
writeln
writeln("-"*ReportMaxWidth)

forall(s in Source) do
	
	if s = "Wind" then 
		! Company is about to finish instalation of wind capacity (see FAQ)
		MaxOutput("Wind") :=  MaxOutput("Wind") + 500 
	else
		! Increase the max output of this source by 1 GW
		MaxOutput(s) := MaxOutput(s) + 1000
	end-if
	
	! Additional increases for hydro
	if s = "Hydro" then 
		NaturalHydroInflow := NaturalHydroInflow * 1.5
		MaxHydroReserve := MaxHydroReserve * 1.5
	end-if
	
	! Fix constraints
	forall(so in Source, t in Times) do
		HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
		OutputCS(so,t) := Generate(so,t) <= MaxOutput(so)
		PumpCS(t) := Pump(t) <= MaxOutput("Hydro")
	end-do
	
	! Reoptimize
	maximize(TotalProfit)
	
	! Output
	write(strfmt(s, 13), "      ", strfmt(getobjval/1e6, 0, 3))
	forall(so in Source) write(strfmt(getsol(TotalEnergyGenerated(so)), 10))
	write("|", getsol(TotalCO2Emmission))
	writeln
	
	! Reset data for re-use
	initialize_data
end-do

EmmissionCS("CO2") := sum(s in Source) TotalEnergyGenerated(s)*Emissions("CO2",s)<=EmissionsLimit("CO2")
forall(s in Source, t in Times) do
	HydroReserveCS(t) := HydroReserve(t) <= MaxHydroReserve
	OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
	PumpCS(t) := Pump(t) <= MaxOutput("Hydro")
end-do


!
! SCENARIO: VARIABLE DEMAND/WIND AVAIL.
!

! The values for nuclear, coal and gas in last period need to be consistent with
! the long term plan. 
forall(s in Source) do
	if s = "Nuclear" or s = "Coal" or s = "Gas" then
		LongTermCS(s) := Generate(s,getprevperiod(1)) = LongTermPlan(s,getprevperiod(1))
	end-if
end-do

! Amount of water stored in reservouir in last period need to be consisten with long term plan
LongTermReservoireCS := HydroReserve(getprevperiod(1)) = LongTermPlanReservoire(getprevperiod(1))

	
MaxOutput("Wind") := MaxOutput("Wind") * WindMu
forall(t in Times) do
	OutputCS("Wind",t) := Generate("Wind",t) <= MaxOutput("Wind")
	Demand(t) := Demand(t) * DemandMu
	DemandCS(t) := EnergySold(t) = Demand(t)
end-do

maximize(TotalProfit)
generate_report("CUSTOM MULTIPLIERS", 'multipliers')


!
! EMISSION CREDITS MODEL
!

! Reset the data
initialize_data

! Remove hard emissions constraints

EmmissionCS('CO2') := 0

! Reset constraints from above
forall(s in Source, t in Times) do
	LongTermCS(s) := 0
	OutputCS(s,t) := Generate(s,t) <= MaxOutput(s)
	DemandCS(t) := EnergySold(t) = Demand(t)
end-do 

LongTermReservoireCS := 0


!
! Loop over various carbon prices to check the composition of energy generation and profits
!

! No free allocation of carbon credits
carbon_loop(0, 'carbon_tax')

! Free allocation equal to stricter CO2 emission limit 
carbon_loop(EmissionsLimit("CO2") * 0.5, 'carbon_credit')


!
! PROCEDURE AND FUNCTION DEFINITIONS
!

! The following are used mostly for convenience and to avoid code repition, e.g.
! when printing out standard reporting or creating CSV files.
! They are not necessary for understanding the model in general.

! Get the index of the 'previous' time period for given current time period t.
! Uses modular arithmetic to find the previous time period, looping around to the start
! when given the end period.  This way we can freely extend the number of time periods
! in the .dat file without changing the main model code. I.e. this is better style.
! N.B. the in-built 'mod' operator is actually a 'remainder' operator and doesn't work
! correctly with negative numbers.  Hence the explicit definition.
function getprevperiod(t:integer):integer
	n := getsize(Times)
	returned := ((((t-2) mod n) + n) mod n) + 1
end-function

! Print a simple heading
procedure print_heading(title:string, uchar:string)
	writeln("\n", title, "\n", uchar*getsize(title), "\n")
end-procedure

! Print a standard table output for the main model.
! Saves us repeating this code for every variation of the model.
procedure generate_report(title:string, tag:string)

	writeln("\n\n")
	print_heading("SCENARIO: " + title, "#")

	!
	! Basic information
	!
	
	print_heading("REVENUE BREAKDOWN", "=")
	
	ColWidth := 20
	writeln(" "*ColWidth, strfmt("(£m)", ColWidth))
	write(strfmt("Total revenue: ", ColWidth))
	writeln(strfmt(getsol(TotalRevenue)/1e6, 0, 3))
	write(strfmt("Running costs: ", ColWidth))
	writeln("(", strfmt(getsol(TotalRunningCost)/1e6, 0, 3), ")")
	write(strfmt("Increase costs: ", ColWidth))
	writeln("(", strfmt(getsol(TotalIncreaseCost)/1e6, 0, 3), ")")
	writeln(" "*ColWidth, "-"*ColWidth)
	write(strfmt("Total profit: ", ColWidth))
	writeln(strfmt(getsol(TotalProfit)/1e6, 0, 3))
	writeln(" "*ColWidth, "-"*ColWidth)
	writeln
	
	!
	! Optimal generation schedule
	!
	
	if ReportOptGenSched then
		print_heading("GENERATION SCHEDULE", "=")
		
		ColWidth := round(ReportMaxWidth/7)
		writeln("-"*ReportMaxWidth)
		write(strfmt(" ", ColWidth))
		forall(t in Times) write(strfmt(t, ColWidth))
		writeln
		writeln("-"*ReportMaxWidth)
		forall(s in Source) do
			write(strfmt(s, ColWidth))
			forall(t in Times) write(strfmt(getsol(Generate(s,t)), ColWidth))
			writeln
		end-do
		
		writeln("."*ReportMaxWidth)
		write(strfmt("Reservoir lvl", ColWidth))
		forall(t in Times) write(strfmt(getsol(HydroReserve(t)), ColWidth))
		writeln
		writeln("-"*ReportMaxWidth)
		
		! Output a standard CSV file for the model
		if ReportOutputCSV then
			makedir(ReportOutputDir)
			fopen(ReportOutputDir + tag + '.csv', F_OUTPUT)
			! Headers
			write('Period,StartTime,EndTime')
			forall(s in Source) do
				write(',', s)
			end-do
			writeln
			! Data
			currtime := 0.0
			forall(t in Times) do
				starttime := currtime
				currtime += PeriodLength(t)
				endtime := currtime
				write(t, ',', starttime, ',', endtime)
				forall(s in Source) do
					write(',', getsol(Generate(s,t)))
				end-do
				writeln
			end-do
			fclose(F_OUTPUT)
		end-if
	end-if
	
	!
	! Constraint reporting/fair prices
	!
	
	! Demand
	if ReportDemandCTInfo then
		print_heading("DEMAND CONSTRAINTS", "=")
		forall(t in Times) do
			if getslack(DemandCS(t)) = 0 then
				writeln("Fair price of demand in period t=" + t + " is: £", getdual(DemandCS(t)),
						", valid for (", getsensrng(XPRS_DN, DemandCS(t)),
						" ,", getsensrng(XPRS_UP, DemandCS(t)),')')
				writeln
			end-if
		end-do
	end-if
	
	! Emissions
	if ReportEmissionsCTInfo then
		print_heading("EMISSIONS CONSTRAINTS", "=")
		HasHitCT := false
		forall(e in Emiss) do
			if getslack(EmmissionCS(e)) = 0 then
				HasHitCT := true
				writeln("Fair price of " + e + " is: £", getdual(EmmissionCS(e)),
						", valid for (", getsensrng(XPRS_DN, EmmissionCS(e)),
						" ,", getsensrng(XPRS_UP, EmmissionCS(e)),')')
				writeln
			end-if
		end-do
		if HasHitCT <> true then
			writeln("Emissions utilization never reaches capacity")
		end-if
	end-if
	
	! Hydro reservoir
	if ReportHydroResCTInfo then
		print_heading("HYDRO CAPACITY CONSTRAINTS", "=")
		HasHitCT := false
		forall(t in Times) do
			if getslack(HydroReserveCS(t)) = 0 then
				HasHitCT := true
				writeln("Fair price of extra hydro capacity at t=" + t + " is: £", getdual(HydroReserveCS(t)),
						", valid for (", getsensrng(XPRS_DN, HydroReserveCS(t)),
						" ,", getsensrng(XPRS_UP, HydroReserveCS(t)),')')
				writeln
			end-if
		end-do
		if HasHitCT <> true then
			writeln("Hydro storage never reaches capacity")
		end-if
	end-if
	
	! Pump
	if ReportPumpCTInfo then
		print_heading("PUMP CONSTRAINTS", "=")
		HasHitCT := false
		forall(t in Times) do
			if getslack(PumpCS(t)) = 0 then
				HasHitCT := true
				writeln("Fair price of extra pump capacity at t=" + t + " is: £", getdual(PumpCS(t)),
						", valid for (", getsensrng(XPRS_DN, PumpCS(t)),
						" ,", getsensrng(XPRS_UP, PumpCS(t)),')')
				writeln
			end-if
		end-do
		if HasHitCT <> true then
			writeln("Pump utilization never reaches capacity")
		end-if
	end-if
	
end-procedure

procedure initialize_data
	initializations from "EPower.dat"
		Emiss Source Times PeriodLength Demand
		MaxOutput RunningCost IncreaseCost
		Emissions EmissionsLimit
		MaxHydroReserve NaturalHydroInflow HydroPowerEfficiencyFrac ElectricityPrice
		DemandMu WindMu
		EmissionsCreditPrice
	end-initializations
end-procedure

procedure carbon_loop(carbon_allocation:real, tag:string)
	! Reset emission prices to 0
	forall(e in Emiss) EmissionsCreditPrice(e) := 0
	
	! Open reporting file
	fopen(ReportOutputDir + tag + '.csv', F_OUTPUT)
	
	write("Profit,TotalRunningCost,TotalIncreaseCost,TotalEmissionCreditCost, Co2Price,")
	forall(s in Source) write(s,',')
	writeln
	
	repeat
		
		TotalEmissionCreditCost :=	sum(e in Emiss) (EmissionsGenerated(e) - carbon_allocation) * EmissionsCreditPrice(e)
		TotalProfit := TotalRevenue - TotalRunningCost - TotalIncreaseCost - TotalEmissionCreditCost
		
		maximize(TotalProfit)
		
		write(getsol(TotalProfit),',',
			  getsol(TotalRunningCost),',',
			  getsol(TotalIncreaseCost),',',
			  getsol(TotalEmissionCreditCost),',',
			  EmissionsCreditPrice("CO2"))
		
		forall(s in Source) write(',',getsol(TotalEnergyGenerated(s)))
		writeln
		
		EmissionsCreditPrice("CO2") += 4
	until EmissionsCreditPrice("CO2") > 100
	
	fclose(F_OUTPUT)
end-procedure


end-model